import copy
import itertools
import logging
import re
import sys
import time

from collections import defaultdict

import numpy as np
import pandas as pd

import pylib.aochelper as aoc
from pylib.aochelper import map_list as mapl
from pylib.aochelper import filter_list as filterl

f"Python version: {sys.version}" |> print
f"Version info: {sys.version_info}" |> print

log = aoc.getLogger(__name__)
f"Initial log-level={aoc.getLogLevelName(log.getEffectiveLevel())}." |> print

"Day 1" |> print

tests = """
1000
2000
3000

4000

5000
6000

7000
8000
9000

10000
""".strip()

def solve_day01pt1(inp):
  """Solve Day 1 part 1."""
  reindeers = inp.split("\n\n") |> fmap$( x -> x.split("\n") |> fmap$(int) )
  #reindeers |> print
  return reindeers |> map$(sum) |> max

"Day 1 part 1" |> print
expected = 24_000
result = solve_day01pt1(tests)
aoc.assert_msg(f"test solve day 1 part 1 expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str("./in/day01.in").strip()
out = solve_day01pt1(ins)
f"day 1 part 1 output: {out}" |> print

def solve_day01pt2(inp):
  """Solve Day 1 part 2."""
  reindeers = inp.split("\n\n") |> fmap$( x -> x.split("\n") |> fmap$(int) )
  top3 = reindeers |> fmap$(sum) |> sorted$(reverse=True) |> .[0:3]
  return top3 |> sum

"Day 1 part 2" |> print
expected = 45_000
result = solve_day01pt2(tests)
aoc.assert_msg(f"test solve day 1 part 1 expected={expected} result={result}", result == expected)

out = solve_day01pt2(ins)
f"day 1 part 2 output: {out}" |> print

tests = """
A Y
B X
C Z
""".strip()

values = {'X': 1, 'Y': 2, 'Z': 3}
outcomes = {
  'A': {'X': 3, 'Y': 6, 'Z': 0},
  'B': {'X': 0, 'Y': 3, 'Z': 6},
  'C': {'X': 6, 'Y': 0, 'Z': 3},
}

def solve_day02pt1(inp):
  """Solve Day 2 part 1."""
  score = 0
  for line in inp.splitlines():
    [p1, p2] = line.split()
    #f"[p1, p2] = {[p1, p2]}" |> print
    round_score = values[p2]  # item value score
    round_score += outcomes[p1][p2]  # outcome score
    #f"adding round score {round_score}" |> print
    score += round_score
  return score

"Day 2 part 1" |> print
expected = 15
result = solve_day02pt1(tests)
aoc.assert_msg(f"test solve day 2 part 1 expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str("./in/day02.in").strip()
out = solve_day02pt1(ins)
f"day 2 part 1 output: {out}" |> print

def solve_day02pt2(inp):
  """Solve Day 2 part 2."""
  outcome_tags = {'X': 0, 'Y': 3, 'Z': 6}  # who wins on pt 2
  outcomes_inv = {}
  for k, innerdict in outcomes.items():
    #outcomes_inv[k] = dict((v, k) for k, v in innerdict.items())  # keys and values swapped
    outcomes_inv[k] = {v: k for k, v in innerdict.items()}  # keys and values swapped
  #f"outcomes_inverse={outcomes_inv}" |> print
  score = 0
  for line in inp.splitlines():
    [p1, o2] = line.split()
    round_score = outcome_tags[o2]
    p2 = outcomes_inv[p1][round_score]  # my item (player 2)
    round_score += values[p2]  # outcome score
    #f"adding round score {round_score} from item={p2}" |> print
    score += round_score
  return score

"Day 2 part 2" |> print
expected = 12
result = solve_day02pt2(tests)
aoc.assert_msg(f"test solve day 2 part 2 expected={expected} result={result}", result == expected)

out = solve_day02pt2(ins)
f"day 2 part 2 output: {out}" |> print

tests = """
vJrwpWtwJgWrhcsFMMfFFhFp
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
PmmdzqPrVvPwwTWBwg
wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
ttgJtRGJQctTZtZT
CrZsJsPPZsGzwwsLwLmpwMDw
""".strip()

def split_str_halfs(s):
  """Split a string in two of equel length"""
  pos = len(s)//2
  return [s[:pos], s[pos:]]

def solve_day03pt1(inp):
  """Solve Day 3 part 1."""
  score = 0
  ofst_lower = ord("a") - 1
  ofst_upper = ord("A") - 27
  for line in inp.splitlines():
    sh1, sh2 = split_str_halfs(line)
    #[sh1, sh2] |> print
    freqh1, freqh2 = [defaultdict(int), defaultdict(int)]
    for c in sh1:
      freqh1[c] += 1
    for c in sh2:
      freqh2[c] += 1
    isct = set(freqh1.keys()).intersection(set(freqh2.keys()))
    assert len(isct) == 1
    isct = list(isct)[0]
    if isct.isupper():
      prio = ord(isct) - ofst_upper
    else:
      prio = ord(isct) - ofst_lower
    score += prio
    #f"set-intersection={isct}, prio={prio}" |> print
  return score

"Day 3 part 1" |> print
expected = 157
result = solve_day03pt1(tests)
aoc.assert_msg(f"test solve day 3 part 1 expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str("./in/day03.in").strip()
out = solve_day03pt1(ins)
f"day 3 part 1 output: {out}" |> print

def solve_day03pt2(inp):
  """Solve Day 3 part 2."""
  score = 0
  ofst_lower = ord("a") - 1
  ofst_upper = ord("A") - 27
  grp = []
  for idx, line in enumerate(inp.splitlines()):
    grp.append(line)
    if len(grp) == 3:
      tgtset = set()
      for idx, memb in enumerate(grp):
        freqs = defaultdict(int)
        for c in memb:
          freqs[c] += 1
        if idx==0:
          tgtset = set(freqs.keys())
        else:
          tgtset = tgtset.intersection(freqs.keys())
      grp = []
      assert len(tgtset) == 1
      un = list(tgtset)[0]
      if un.isupper():
        prio = ord(un) - ofst_upper
      else:
        prio = ord(un) - ofst_lower
      #f"grp set-intersection={tgtset}, prio={prio}" |> print
      score += prio
  assert idx > 0 
  assert (idx+1) % 3 == 0
  return score

"Day 3 part 2" |> print
expected = 70
result = solve_day03pt2(tests)
aoc.assert_msg(f"test solve day 3 part 2 expected={expected} result={result}", result == expected)

out = solve_day03pt2(ins)
f"day 3 part 2 output: {out}" |> print

day = "Day 4"
symb = "day04"
part = "part 1"
tests = """
2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8
""".strip()

def has_fully_containment(e1, e2):
  return (e1[0] <= e2[0] and e1[1] >= e2[1]) or (e2[0] <= e1[0] and e2[1] >= e1[1])

def solve_day04pt1(inp):
  """Solve Day 4 part 1."""
  score = 0
  #pairs = []
  for line in inp.splitlines():
    elves = line.split(",")
    elves = list(map(lambda it: list(map(int, it.split("-"))), elves))
    if has_fully_containment(elves[0], elves[1]):
      #f"{elves} has fully containment" |> print
      score += 1
  #pairs |> print
  return score

f"{day} {part}" |> print
expected = 2
result = solve_day04pt1(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str(f"./in/{symb}.in").strip()
out = solve_day04pt1(ins)
f"{day} {part} output: {out}" |> print

def has_overlap(e1, e2):
  return (e1[1] >= e2[0] and e1[1] <= e2[1]) or (e2[1] >= e1[0] and e2[1] <= e1[1])

def solve_day04pt2(inp):
  """Solve Day 4 part 2."""
  score = 0
  for line in inp.splitlines():
    elves = line.split(",")
    elves = list(map(lambda it: list(map(int, it.split("-"))), elves))
    if has_overlap(elves[0], elves[1]):
      #f"{elves} has overlap" |> print
      score += 1
  return score

part = "part 2"
expected = 4
f"{day} {part}" |> print
result = solve_day04pt2(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

out = solve_day04pt2(ins)
f"{day} {part} output: {out}" |> print

day = "Day 5"
symb = "day05"
part = "part 1"
tests = """
    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2
"""

def pop_n(l, n):
  """Pop n members from top of stack (list), return popped head and altered stack."""
  popped, popped_lst = [ l[-n:], l[0:len(l)-n] ]
  return [popped, popped_lst]

def push_n(l, data):
  """Push data (list) members to top of stack (list), return altered stack."""
  for elem in data:
    l.append(elem)
  return l

def transpose_lol(lol):
  """Transpose a list-of-lists."""
  # short circuits at shortest nested list if table is jagged:
  return list(map(list, zip(*lol)))

def get_stacks(rows):
  """Take parsed rows from input string and pprocess into target data structure list-of-tacks."""
  stacks = transpose_lol(rows)
  stacks = mapl(lambda it: list(reversed(it)), stacks)
  for stack in stacks:
    while stack[-1] == "":
      stack.pop()
  return stacks

def play_stack_cmds(stacks, cmds):
  """Play the commands on stacks data."""
  for cmd in cmds:
    anz, frm, to = cmd
    hd, stacks[frm-1] = pop_n(stacks[frm-1], anz)
    stacks[to-1] = push_n(stacks[to-1], reversed(hd))
  return stacks

def solve_day05pt1(inp):
  """Solve Day 5 part 1."""
  chunk_size = 4
  stacks = []
  rows = []
  cmds = []
  #f"inp=\n{inp}" |> print
  for line in inp.split("\n"):
    #f"line=>{line}< len={len(line)}" |> print
    line += " "
    if "[" in line:
      llen = len(line)
      row = [ line[i:i+chunk_size] for i in range(0, llen, chunk_size) ]
      #f"found row1={row}" |> print
      row = mapl(lambda it: it.replace("[", "").replace("]", "").strip(), row)
      #f"found row2={row}" |> print
      rows.append(row)
    elif line.strip() == "":
      #"empty line found" |> print
      continue
    elif "move" in line:
      m = re.search(r"^move (\d+) from (\d+) to (\d+)", line)
      l = mapl(int, [m.group(1), m.group(2), m.group(3)])
      cmds.append(l)
    else:
      #f"unparsed line=>{line}<" |> print
      continue
  stacks = get_stacks(rows)
  #f"initial_stacks=\n{stacks}" |> print
  #f"  cmds=\n{cmds}" |> print
  stacks = play_stack_cmds(stacks, cmds)
  result = "".join([stack.pop() for stack in stacks])
  #f"result={result}" |> print
  return result

f"{day} {part}" |> print
expected = "CMZ"
result = solve_day05pt1(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str(f"./in/{symb}.in")
out = solve_day05pt1(ins)
f"{day} {part} result: {out}" |> print

def play_stack_cmds_pt2(stacks, cmds):
  """Play the commands on stacks data, modified for part 2."""
  for cmd in cmds:
    anz, frm, to = cmd
    hd, stacks[frm-1] = pop_n(stacks[frm-1], anz)
    stacks[to-1] = push_n(stacks[to-1], hd)  # changed, not reversed
  return stacks

def solve_day05pt2(inp):
  """Solve Day 5 part 2."""
  chunk_size = 4
  stacks = []
  rows = []
  cmds = []
  for line in inp.split("\n"):
    line += " "
    if "[" in line:
      llen = len(line)
      row = [ line[i:i+chunk_size] for i in range(0, llen, chunk_size) ]
      row = mapl(lambda it: it.replace("[", "").replace("]", "").strip(), row)
      rows.append(row)
    elif line.strip() == "":
      continue
    elif "move" in line:
      m = re.search(r"^move (\d+) from (\d+) to (\d+)", line)
      l = mapl(int, [m.group(1), m.group(2), m.group(3)])
      cmds.append(l)
    else:
      continue
  stacks = get_stacks(rows)
  stacks = play_stack_cmds_pt2(stacks, cmds)  # changed, pt2
  result = "".join([stack.pop() for stack in stacks])
  return result

part = "part 2"
expected = "MCD"
f"{day} {part}" |> print
result = solve_day05pt2(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

out = solve_day05pt2(ins)
f"{day} {part} output: {out}" |> print

day = "Day 6"
symb = "day06"
part = "part 1"
tests = """
mjqjpqmgbljsphdztnvjfqwrcgsmlb
""".strip()  # 7
test2 = "bvwbjplbgvbhsrlpgdmjqwftvncz"  # 5
test3 = "nppdvjthqldpwncqszvftbrmjlhg"  # 6
test4 = "nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg"  # 10
test5 = "zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw"  # 11

def solve_day06(inp, pkglen=4):
  """Solve Day 6 part 1."""
  pkgct = pkglen - 1
  result = -1
  for idx, c in enumerate(inp):
    if idx < pkgct:
      continue
    l = list(inp[idx-pkgct:idx+1])
    #l |> print
    st = set(l)
    if len(st) == pkglen:
      result = idx+1
      break
  return result

f"{day} {part}" |> print
expected = 7
result = solve_day06(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

expected = 5; result = solve_day06(test2)
aoc.assert_msg(f"test2 solve {day} {part} expected={expected} result={result}", result == expected)

expected = 6; result = solve_day06(test3)
aoc.assert_msg(f"test3 solve {day} {part} expected={expected} result={result}", result == expected)

expected = 10; result = solve_day06(test4)
aoc.assert_msg(f"test4 solve {day} {part} expected={expected} result={result}", result == expected)

expected = 11; result = solve_day06(test5)
aoc.assert_msg(f"test5 solve {day} {part} expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str(f"./in/{symb}.in")
ins = ins.splitlines()[0]
out = solve_day06(ins)
f"{day} {part} result: {out}" |> print

part = "part 2"
expected = 19
f"{day} {part}" |> print
result = solve_day06(tests, pkglen=14)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

expected = 23; result = solve_day06(test2, pkglen=14)
aoc.assert_msg(f"test2 solve {day} {part} expected={expected} result={result}", result == expected)

expected = 23; result = solve_day06(test3, pkglen=14)
aoc.assert_msg(f"test3 solve {day} {part} expected={expected} result={result}", result == expected)

expected = 29; result = solve_day06(test4, pkglen=14)
aoc.assert_msg(f"test4 solve {day} {part} expected={expected} result={result}", result == expected)

expected = 26; result = solve_day06(test5, pkglen=14)
aoc.assert_msg(f"test5 solve {day} {part} expected={expected} result={result}", result == expected)

out = solve_day06(ins, pkglen=14)
f"{day} {part} output: {out}" |> print

day = "Day 7"
symb = "day07"
part = "part 1"
tests = """
$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k
""".strip()

def get_dirsizes(inp):
  from pathlib import Path
  from collections import Counter

  dirsizes = Counter()
  currdir = top = Path('/')

  for line in inp.splitlines():
    args = line.strip().split()
    if args[0] == '$':
      if args[1] == 'cd':
        if args[2] == '/':
          currdir = top
        elif args[2] == '..':
          currdir = currdir.parent
        else:
          currdir /= args[2]
    elif args[0] != 'dir':
      #dirsizes[currdir] += (size := int(args[0]))
      size = int(args[0])
      dirsizes[currdir] += size
      for p in currdir.parents:
        dirsizes[p] += size
  return dirsizes

def solve_day07pt1(inp):
  #dirsizes = get_dirsizes(inp)
  #sizelist = sorted(dirsizes.values())
  sizelist = get_dirsizes(inp).values()
  return sum(n for n in sizelist if n <= 100_000)

f"{day} {part}" |> print
expected = 95437
result = solve_day07pt1(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

ins = aoc.read_file_to_str(F"./in/{symb}.in").strip()
out = solve_day07pt1(ins)
f"{day} {part} result: {out}" |> print

def solve_day07pt2(inp):
  #print('P2 =', sizelist[bisect(sizelist, dirsizes[top] - 4000_0000)])
  sizelist = get_dirsizes(inp).values()
  totsize = max(sizelist)
  sizelist = filterl(lambda it: it >= totsize - 4000_0000, sizelist)
  return min(sizelist)

part = "part 2"
f"{day} {part}" |> print
expected = 24933642
result = solve_day07pt2(tests)
aoc.assert_msg(f"test solve {day} {part} expected={expected} result={result}", result == expected)

out = solve_day07pt2(ins)
f"{day} {part} result: {out}" |> print


